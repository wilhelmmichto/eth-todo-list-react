{"version":3,"sources":["config.js","components/TodoList.js","components/App.js","serviceWorker.js","index.js"],"names":["TODO_LIST_ABI","inputs","payable","stateMutability","type","anonymous","indexed","internalType","name","constant","outputs","TodoList","_this","this","react_default","a","createElement","id","onSubmit","event","preventDefault","props","createTask","task","value","ref","input","className","placeholder","required","hidden","tasks","map","key","defaultChecked","completed","checkbox","onClick","toggleCompleted","content","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","account","taskCount","loading","bind","assertThisInitialized","loadBlockchainData","web3","Web3","givenProvider","eth","getAccounts","accounts","setState","todoList","Contract","methods","i","concat","toConsumableArray","_this2","send","from","once","receipt","taskId","_this3","href","target","role","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91053aff.chunk.js","sourcesContent":["export const TODO_LIST_ADDRESS='0x835838a0e663F29BC5b31876a3189740e06a4D4E'\r\nexport const TODO_LIST_ABI=[\r\n  {\r\n    \"inputs\": [],\r\n    \"payable\": false,\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"constructor\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"id\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"completed\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"name\": \"TaskCompleted\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"id\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"string\",\r\n        \"name\": \"content\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"completed\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"name\": \"TaskCreated\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"constant\": true,\r\n    \"inputs\": [],\r\n    \"name\": \"taskCount\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"payable\": false,\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"constant\": true,\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"tasks\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"id\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"content\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"completed\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"payable\": false,\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"constant\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"_content\",\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"name\": \"createTask\",\r\n    \"outputs\": [],\r\n    \"payable\": false,\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"constant\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"_id\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"toggleCompleted\",\r\n    \"outputs\": [],\r\n    \"payable\": false,\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  }\r\n]","import React, { Component } from 'react'\r\n\r\nclass TodoList extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"content\">\r\n        <form onSubmit={(event) => {\r\n          event.preventDefault()\r\n          this.props.createTask(this.task.value)\r\n        }}>\r\n          <input\r\n            id=\"newTask\"\r\n            ref={(input) => {\r\n              this.task = input\r\n            }}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Add task...\"\r\n            required />\r\n          <input type=\"submit\" hidden={true} />\r\n        </form>\r\n        <ul id=\"taskList\" className=\"list-unstyled\">\r\n          { this.props.tasks.map((task, key) => {\r\n            return(\r\n              <div className=\"taskTemplate checkbox\" key={key}>\r\n                <label>\r\n                  <input\r\n                  type=\"checkbox\"\r\n                  name={task.id}\r\n                  defaultChecked={task.completed}\r\n                  ref={(input) => {\r\n                    this.checkbox = input\r\n                  }}\r\n                  onClick={(event) => {\r\n                    this.props.toggleCompleted(this.checkbox.name) }}/>\r\n                  <span className=\"content\">{task.content}</span>\r\n                </label>\r\n              </div>\r\n            )\r\n          })}\r\n        </ul>\r\n        <ul id=\"completedTaskList\" className=\"list-unstyled\">\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport './App.css'\nimport { TODO_LIST_ABI, TODO_LIST_ADDRESS } from '../config'\nimport TodoList from './TodoList'\n\nclass App extends Component {\n  componentWillMount() {\n    this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    const todoList = new web3.eth.Contract(TODO_LIST_ABI, TODO_LIST_ADDRESS)\n    this.setState({ todoList })\n    const taskCount = await todoList.methods.taskCount().call()\n    this.setState({ taskCount })\n    for (var i = 1; i <= taskCount; i++) {\n      const task = await todoList.methods.tasks(i).call()\n      this.setState({\n        tasks: [...this.state.tasks, task]\n      })\n    }\n    this.setState({ loading: false })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      taskCount: 0,\n      tasks: [],\n      loading: true\n    }\n\n    this.createTask = this.createTask.bind(this)\n    this.toggleCompleted = this.toggleCompleted.bind(this)\n  }\n\n  createTask(content) {\n    this.setState({ loading: true })\n    this.state.todoList.methods.createTask(content).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  toggleCompleted(taskId) {\n    this.setState({ loading: true })\n    this.state.todoList.methods.toggleCompleted(taskId).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"http://www.dappuniversity.com/free-download\" target=\"_blank\">Dapp University | Todo List</a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small><a className=\"nav-link\" href=\"#\"><span id=\"account\"></span></a></small>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex justify-content-center\">\n              { this.state.loading\n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\n                : <TodoList\n                  tasks={this.state.tasks}\n                  createTask={this.createTask}\n                  toggleCompleted={this.toggleCompleted} />\n              }\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
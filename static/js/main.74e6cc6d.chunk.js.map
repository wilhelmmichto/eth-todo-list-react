{"version":3,"sources":["components/TodoLists.js","components/App.js","serviceWorker.js","index.js"],"names":["TodoList","_this","this","react_default","a","createElement","id","onSubmit","event","preventDefault","props","createTask","task","value","ref","input","type","className","placeholder","required","hidden","tasks","map","key","style","marginLeft","name","defaultChecked","completed","checkbox","onClick","toggleCompleted","content","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","account","taskCount","loading","bind","assertThisInitialized","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","net","getId","networkId","todoData","networks","todoList","Contract","abi","address","methods","console","log","i","concat","toConsumableArray","_this2","send","from","once","receipt","taskId","_this3","color","height","fontSize","marginRight","role","TodoLists","marginTop","display","alignItems","borderRadius","border","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74e6cc6d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass TodoList extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"content\" >\r\n        <form onSubmit={(event) => {\r\n          event.preventDefault()\r\n          this.props.createTask(this.task.value)\r\n        }}>\r\n          <input\r\n            id=\"newTask\"\r\n            ref={(input) => {\r\n              this.task = input\r\n            }}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Add task...\"\r\n            required />\r\n          <input type=\"submit\" hidden={true} />\r\n        </form>\r\n        <ul  id=\"taskList\" className=\"list-unstyled\">\r\n          { this.props.tasks.map((task, key) => {\r\n            return(\r\n              <div className=\"taskTemplate checkbox\" key={key}>\r\n                <label style={{marginLeft:'50px'}}>\r\n                  <input \r\n                  type=\"checkbox\"\r\n                  name= {task.id}\r\n                  defaultChecked={task.completed}\r\n                  ref={(input) => {\r\n                    this.checkbox = input\r\n                  }}\r\n                  onClick={(event) => {\r\n                    this.props.toggleCompleted(this.checkbox.name) }}/>\r\n                  <span className=\"content\" style={{marginLeft:'10px'}}>  {task.content}</span>\r\n                </label>\r\n              </div>\r\n            )\r\n          })}\r\n        </ul>\r\n        <ul id=\"completedTaskList\" className=\"list-unstyled\">\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Web3 from \"web3\";\nimport TodoList from '../truffle_abis/TodoList.json'\nimport TodoLists from \"./TodoLists\";\n\nclass App extends Component {\n  async UNSAFE_componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"No ethereum beowser detected! Check out Metamask!\");\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n    const networkId = await web3.eth.net.getId();\n   \n    //Load TODO Contract\n    const todoData = TodoList.networks[networkId];\n    if (todoData) {\n      const todoList = new web3.eth.Contract(TodoList.abi, todoData.address);\n      this.setState({ todoList });\n      let taskCount = await todoList.methods.taskCount().call()\n      this.setState({taskCount})\n      console.log(taskCount);\n      for (var i = 1; i <= taskCount; i++) {\n        const task = await todoList.methods.tasks(i).call()\n        this.setState({\n          tasks: [...this.state.tasks, task]\n        })\n      }\n      this.setState({loading: false})\n    } else {\n      window.alert(\"Todo List not deployed to the network\");\n    }\n    \n  }\n\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      taskCount: 0,\n      tasks:[],\n      loading: true\n    }\n    this.createTask = this.createTask.bind(this)\n    this.toggleCompleted = this.toggleCompleted.bind(this)\n\n  };\n\n  createTask(content) {\n    this.setState({ loading: true })\n    this.state.todoList.methods.createTask(content).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  toggleCompleted(taskId) {\n    this.setState({ loading: true })\n    this.state.todoList.methods.toggleCompleted(taskId).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  \n\n\n\n\n\n  render() {\n    return (\n      <div className=\"app\">\n        <nav\n          className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow  \"\n          style={{ color: \"yellow\", height: \"50px\" }}\n        >\n          <div style={{ marginLeft: \"5px\", fontSize: \"20px\" }}>\n            Todo List DAPP\n          </div>\n          <div style={{ marginRight: \"5px\", fontSize: \"15px\" }}>\n            {this.state.account}\n          </div>\n        </nav>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <main\n              role=\"main\"\n              className=\"main col-lg-12 d-flex justify-content-center\"\n            >\n              {this.state.loading ? (\n                <div id=\"loader\" className=\"text-center\">\n                  <p className=\"text-center\">Loading...</p>\n                </div>\n              ) : (\n                <TodoLists\n                  tasks={this.state.tasks}\n                  createTask={this.createTask}\n                  toggleCompleted={this.toggleCompleted}\n                />\n              )}\n            </main>\n          </div>\n          <div\n            className=\"col-lg-12 d-flex justify-content-center \"\n            style={{\n              marginTop: \"200px\",\n              display: \"inline\",\n              alignItems: \"center\",\n            }}\n          >\n            <span style={{ borderRadius: \"5px\", border: \"solid 1px\" }}>\n              &nbsp; Only for testing purposes ... Do not use real ETH &nbsp;\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}